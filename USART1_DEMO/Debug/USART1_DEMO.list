
USART1_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000228  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009dd  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000278  00000000  00000000  00010dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00011050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000110e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ad1  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ec2  00000000  00000000  00024c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f8b6  00000000  00000000  00025adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5391  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000144  00000000  00000000  000a53e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003a8 	.word	0x080003a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003a8 	.word	0x080003a8

080001d8 <main>:
void delay(int sec);
void Usart_Init(void);
char Usart_Read(void);
void USART1_write(char data);
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	volatile char ch;
	Usart_Init();
 80001de:	f000 f80b 	bl	80001f8 <Usart_Init>
	while(1)
	{
		ch=Usart_Read();
 80001e2:	f000 f855 	bl	8000290 <Usart_Read>
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
		USART1_write(ch);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f862 	bl	80002b8 <USART1_write>
		ch=Usart_Read();
 80001f4:	e7f5      	b.n	80001e2 <main+0xa>
	...

080001f8 <Usart_Init>:
	}
	return 0;
}
void Usart_Init(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0x10; 						//Enable APB2ENR
 80001fc:	4b21      	ldr	r3, [pc, #132]	; (8000284 <Usart_Init+0x8c>)
 80001fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000200:	4a20      	ldr	r2, [pc, #128]	; (8000284 <Usart_Init+0x8c>)
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= 0x1; 							//Enable GPIOA->PA9
 8000208:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <Usart_Init+0x8c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a1d      	ldr	r2, [pc, #116]	; (8000284 <Usart_Init+0x8c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~0x3C0000;							//clear pa9 and pa10
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <Usart_Init+0x90>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <Usart_Init+0x90>)
 800021a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x280000; 							//Alernate Function at PA9 AND PA10
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <Usart_Init+0x90>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a18      	ldr	r2, [pc, #96]	; (8000288 <Usart_Init+0x90>)
 8000226:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &=~0xFF0;						//clear pa9 and pa10
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <Usart_Init+0x90>)
 800022e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000230:	4a15      	ldr	r2, [pc, #84]	; (8000288 <Usart_Init+0x90>)
 8000232:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000236:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |=0x770; 						//Enable USART1 FOR pa9 and pa10
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <Usart_Init+0x90>)
 800023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <Usart_Init+0x90>)
 800023e:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000242:	6253      	str	r3, [r2, #36]	; 0x24
	USART1->BRR |= 0x683; 							//9600 Baud Rate
 8000244:	4b11      	ldr	r3, [pc, #68]	; (800028c <Usart_Init+0x94>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <Usart_Init+0x94>)
 800024a:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 800024e:	f043 0303 	orr.w	r3, r3, #3
 8000252:	6093      	str	r3, [r2, #8]
	USART1->CR1 |= 0x4; 							//Rx Mode PA10
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <Usart_Init+0x94>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <Usart_Init+0x94>)
 800025a:	f043 0304 	orr.w	r3, r3, #4
 800025e:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |=0x8;								//Tx Mode PA9
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <Usart_Init+0x94>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <Usart_Init+0x94>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	60d3      	str	r3, [r2, #12]
	USART1->CR1 |= 0x2000; 							//USART1 Enable
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <Usart_Init+0x94>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a06      	ldr	r2, [pc, #24]	; (800028c <Usart_Init+0x94>)
 8000272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000276:	60d3      	str	r3, [r2, #12]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020000 	.word	0x40020000
 800028c:	40011000 	.word	0x40011000

08000290 <Usart_Read>:

char Usart_Read(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	while(!(USART1->SR & 0x20)){} 				//Check the status register for Rx Buffer
 8000294:	bf00      	nop
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <Usart_Read+0x24>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f003 0320 	and.w	r3, r3, #32
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <Usart_Read+0x6>
	return USART1->DR; 							//Return Data registers
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <Usart_Read+0x24>)
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	b2db      	uxtb	r3, r3
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40011000 	.word	0x40011000

080002b8 <USART1_write>:
void USART1_write(char data)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	while(!(USART1->SR & 0x80))	{}				//if 0 enters loops if 1 exits											//This loop is for Tx buffer
 80002c2:	bf00      	nop
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <USART1_write+0x2c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <USART1_write+0xc>
	USART1->DR = (data & 0xFF);						//Sending data to data register
 80002d0:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <USART1_write+0x2c>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	6053      	str	r3, [r2, #4]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40011000 	.word	0x40011000

080002e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <SystemInit+0x20>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <SystemInit+0x20>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800030c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000312:	490e      	ldr	r1, [pc, #56]	; (800034c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000328:	4c0b      	ldr	r4, [pc, #44]	; (8000358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000336:	f7ff ffd7 	bl	80002e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800033e:	f7ff ff4b 	bl	80001d8 <main>
  bx  lr    
 8000342:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	2000001c 	.word	0x2000001c

0800035c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4d0d      	ldr	r5, [pc, #52]	; (8000398 <__libc_init_array+0x38>)
 8000364:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000366:	1b64      	subs	r4, r4, r5
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	2600      	movs	r6, #0
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	4d0b      	ldr	r5, [pc, #44]	; (80003a0 <__libc_init_array+0x40>)
 8000372:	4c0c      	ldr	r4, [pc, #48]	; (80003a4 <__libc_init_array+0x44>)
 8000374:	f000 f818 	bl	80003a8 <_init>
 8000378:	1b64      	subs	r4, r4, r5
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	2600      	movs	r6, #0
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
