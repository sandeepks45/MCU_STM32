
I2C_RTC_Register.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001110  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080012b0  080012b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001314  08001314  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001314  08001314  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001314  08001314  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001314  08001314  00011314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001318  08001318  00011318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800131c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000068  08001384  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08001384  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001858  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006b7  00000000  00000000  000218f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00021fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  000221e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e6b  00000000  00000000  000223c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002983  00000000  00000000  0003722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084326  00000000  00000000  00039bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bded4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af4  00000000  00000000  000bdf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001298 	.word	0x08001298

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001298 	.word	0x08001298

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

  TIME time;


  int main(void)
   {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af02      	add	r7, sp, #8

       I2C1_init();
 8000286:	f000 f851 	bl	800032c <I2C1_init>
       LCD_init();
 800028a:	f000 f9ec 	bl	8000666 <LCD_init>
       delay(10);
 800028e:	200a      	movs	r0, #10
 8000290:	f000 f998 	bl	80005c4 <delay>

   //    LCD_data('m');
       LCD_string("TIME:");
 8000294:	481f      	ldr	r0, [pc, #124]	; (8000314 <main+0x94>)
 8000296:	f000 f9ca 	bl	800062e <LCD_string>
       LCD_command(0xC0);
 800029a:	20c0      	movs	r0, #192	; 0xc0
 800029c:	f000 fa76 	bl	800078c <LCD_command>
       LCD_string("DATE:");
 80002a0:	481d      	ldr	r0, [pc, #116]	; (8000318 <main+0x98>)
 80002a2:	f000 f9c4 	bl	800062e <LCD_string>
       //I2C1_burstWrite(SLAVE_ADDR, 0x00, 7, timeDateToSet);

       while (1)
       {
       	LCD_command(0x86);
 80002a6:	2086      	movs	r0, #134	; 0x86
 80002a8:	f000 fa70 	bl	800078c <LCD_command>

       	Get_Time();		//reading RTC data
 80002ac:	f000 f93c 	bl	8000528 <Get_Time>

       	sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <main+0x9c>)
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <main+0x9c>)
 80002b8:	785b      	ldrb	r3, [r3, #1]
 80002ba:	4619      	mov	r1, r3
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <main+0x9c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	460b      	mov	r3, r1
 80002c4:	4916      	ldr	r1, [pc, #88]	; (8000320 <main+0xa0>)
 80002c6:	4817      	ldr	r0, [pc, #92]	; (8000324 <main+0xa4>)
 80002c8:	f000 fb78 	bl	80009bc <siprintf>
       	delay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 f979 	bl	80005c4 <delay>
       	LCD_string(buffer);
 80002d2:	4814      	ldr	r0, [pc, #80]	; (8000324 <main+0xa4>)
 80002d4:	f000 f9ab 	bl	800062e <LCD_string>
       	delay(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 f973 	bl	80005c4 <delay>

       	sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <main+0x9c>)
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <main+0x9c>)
 80002e6:	795b      	ldrb	r3, [r3, #5]
 80002e8:	4619      	mov	r1, r3
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <main+0x9c>)
 80002ec:	799b      	ldrb	r3, [r3, #6]
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	460b      	mov	r3, r1
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <main+0xa8>)
 80002f4:	480b      	ldr	r0, [pc, #44]	; (8000324 <main+0xa4>)
 80002f6:	f000 fb61 	bl	80009bc <siprintf>
       	delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f962 	bl	80005c4 <delay>
       	LCD_command(0xC6);
 8000300:	20c6      	movs	r0, #198	; 0xc6
 8000302:	f000 fa43 	bl	800078c <LCD_command>
       	LCD_string(buffer);
 8000306:	4807      	ldr	r0, [pc, #28]	; (8000324 <main+0xa4>)
 8000308:	f000 f991 	bl	800062e <LCD_string>
       	//delay(1);
       	//LCD_command(0x08);				//turn off the screen
       	//delay(200);
       	LCD_command(0x0C);				//turn on the screen and cursor off
 800030c:	200c      	movs	r0, #12
 800030e:	f000 fa3d 	bl	800078c <LCD_command>
       	LCD_command(0x86);
 8000312:	e7c8      	b.n	80002a6 <main+0x26>
 8000314:	080012b0 	.word	0x080012b0
 8000318:	080012b8 	.word	0x080012b8
 800031c:	200000a4 	.word	0x200000a4
 8000320:	080012c0 	.word	0x080012c0
 8000324:	20000094 	.word	0x20000094
 8000328:	080012d0 	.word	0x080012d0

0800032c <I2C1_init>:

   }


  void I2C1_init(void)
  {
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

  	RCC->AHB1ENR |= 2; 							/* Enable GPIOB clock */
 8000330:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <I2C1_init+0xac>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000334:	4a28      	ldr	r2, [pc, #160]	; (80003d8 <I2C1_init+0xac>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6313      	str	r3, [r2, #48]	; 0x30
  	RCC->APB1ENR |= 1<<21; 					/* Enable I2C1 clock */
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <I2C1_init+0xac>)
 800033e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000340:	4a25      	ldr	r2, [pc, #148]	; (80003d8 <I2C1_init+0xac>)
 8000342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000346:	6413      	str	r3, [r2, #64]	; 0x40

  	/* configure PB8, PB9 pins for I2C1 */

  	GPIOB->MODER &= ~0xF0000; 				/* PB8, PB9 use alternate function */
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <I2C1_init+0xb0>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a23      	ldr	r2, [pc, #140]	; (80003dc <I2C1_init+0xb0>)
 800034e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000352:	6013      	str	r3, [r2, #0]
  	GPIOB->MODER |= 0xA0000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <I2C1_init+0xb0>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <I2C1_init+0xb0>)
 800035a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800035e:	6013      	str	r3, [r2, #0]
  	GPIOB->AFR[1] &= ~0xFF; 				/* PB8, PB9 I2C1 SCL, SDA */
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <I2C1_init+0xb0>)
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	4a1d      	ldr	r2, [pc, #116]	; (80003dc <I2C1_init+0xb0>)
 8000366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800036a:	6253      	str	r3, [r2, #36]	; 0x24
  	GPIOB->AFR[1] |= 0x44;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <I2C1_init+0xb0>)
 800036e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <I2C1_init+0xb0>)
 8000372:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000376:	6253      	str	r3, [r2, #36]	; 0x24
  	GPIOB->OTYPER |= 0x300; 				/* output open-drain */
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <I2C1_init+0xb0>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a17      	ldr	r2, [pc, #92]	; (80003dc <I2C1_init+0xb0>)
 800037e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000382:	6053      	str	r3, [r2, #4]
  	GPIOB->PUPDR &=~0xF0000; 				/* with pull-ups */
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <I2C1_init+0xb0>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a14      	ldr	r2, [pc, #80]	; (80003dc <I2C1_init+0xb0>)
 800038a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800038e:	60d3      	str	r3, [r2, #12]
  	GPIOB->PUPDR |= 0x50000;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <I2C1_init+0xb0>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <I2C1_init+0xb0>)
 8000396:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800039a:	60d3      	str	r3, [r2, #12]

  	I2C1->CR1 = 0x8000; 						/* software reset I2C1 */
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <I2C1_init+0xb4>)
 800039e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003a2:	601a      	str	r2, [r3, #0]
  	I2C1->CR1 &= ~0x8000;						/* out of reset */
 80003a4:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <I2C1_init+0xb4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <I2C1_init+0xb4>)
 80003aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003ae:	6013      	str	r3, [r2, #0]
  	I2C1->CR2 = 0x10; 						/* peripheral clock is 16 MHz*/
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <I2C1_init+0xb4>)
 80003b2:	2210      	movs	r2, #16
 80003b4:	605a      	str	r2, [r3, #4]

  	I2C1->CCR = 80; 							/* standard mode, 100kHz clock */ //0x50
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <I2C1_init+0xb4>)
 80003b8:	2250      	movs	r2, #80	; 0x50
 80003ba:	61da      	str	r2, [r3, #28]
  	I2C1->TRISE =17; 							/* maximum rise time */  //0x11
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <I2C1_init+0xb4>)
 80003be:	2211      	movs	r2, #17
 80003c0:	621a      	str	r2, [r3, #32]
  	I2C1->CR1 |= 0x1; 						/* enable I2C1module */
 80003c2:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <I2C1_init+0xb4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <I2C1_init+0xb4>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6013      	str	r3, [r2, #0]
  }
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40020400 	.word	0x40020400
 80003e0:	40005400 	.word	0x40005400

080003e4 <I2C1_burstRead>:
//      while (!(I2C1->SR1 & 4));               /* wait until transfer finished */
//      I2C1->CR1 |= 0x200;                     /* generate stop */
//  }

  void I2C1_burstRead(char saddr, char maddr, int n, char* data)
  {
 80003e4:	b480      	push	{r7}
 80003e6:	b087      	sub	sp, #28
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60ba      	str	r2, [r7, #8]
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	4603      	mov	r3, r0
 80003f0:	73fb      	strb	r3, [r7, #15]
 80003f2:	460b      	mov	r3, r1
 80003f4:	73bb      	strb	r3, [r7, #14]
      volatile int tmp;

      while (I2C1->SR2 & 2);                  /* wait until bus not busy */
 80003f6:	bf00      	nop
 80003f8:	4b4a      	ldr	r3, [pc, #296]	; (8000524 <I2C1_burstRead+0x140>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0302 	and.w	r3, r3, #2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1f9      	bne.n	80003f8 <I2C1_burstRead+0x14>
      I2C1->CR1 &= ~0x800;                    /* disable POS */
 8000404:	4b47      	ldr	r3, [pc, #284]	; (8000524 <I2C1_burstRead+0x140>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a46      	ldr	r2, [pc, #280]	; (8000524 <I2C1_burstRead+0x140>)
 800040a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800040e:	6013      	str	r3, [r2, #0]
      I2C1->CR1 |= 0x100;                     /* generate start */
 8000410:	4b44      	ldr	r3, [pc, #272]	; (8000524 <I2C1_burstRead+0x140>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a43      	ldr	r2, [pc, #268]	; (8000524 <I2C1_burstRead+0x140>)
 8000416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800041a:	6013      	str	r3, [r2, #0]
      while (!(I2C1->SR1 & 1));               /* wait until start flag is set */
 800041c:	bf00      	nop
 800041e:	4b41      	ldr	r3, [pc, #260]	; (8000524 <I2C1_burstRead+0x140>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f9      	beq.n	800041e <I2C1_burstRead+0x3a>
      I2C1->DR = saddr << 1;                  /* transmit slave address + Write */
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	005a      	lsls	r2, r3, #1
 800042e:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <I2C1_burstRead+0x140>)
 8000430:	611a      	str	r2, [r3, #16]
      while (!(I2C1->SR1 & 2));               /* wait until addr flag is set */
 8000432:	bf00      	nop
 8000434:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <I2C1_burstRead+0x140>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <I2C1_burstRead+0x50>
      tmp = I2C1->SR2;                        /* clear addr flag */
 8000440:	4b38      	ldr	r3, [pc, #224]	; (8000524 <I2C1_burstRead+0x140>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	617b      	str	r3, [r7, #20]
      while (!(I2C1->SR1 & 0x80));            /* wait until transmitter empty */
 8000446:	bf00      	nop
 8000448:	4b36      	ldr	r3, [pc, #216]	; (8000524 <I2C1_burstRead+0x140>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <I2C1_burstRead+0x64>
      I2C1->DR = maddr;                       /* send memory address */
 8000454:	4a33      	ldr	r2, [pc, #204]	; (8000524 <I2C1_burstRead+0x140>)
 8000456:	7bbb      	ldrb	r3, [r7, #14]
 8000458:	6113      	str	r3, [r2, #16]
      while (!(I2C1->SR1 & 0x80));            /* wait until transmitter empty */
 800045a:	bf00      	nop
 800045c:	4b31      	ldr	r3, [pc, #196]	; (8000524 <I2C1_burstRead+0x140>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000464:	2b00      	cmp	r3, #0
 8000466:	d0f9      	beq.n	800045c <I2C1_burstRead+0x78>

      I2C1->CR1 |= 0x100;                     /* generate restart */
 8000468:	4b2e      	ldr	r3, [pc, #184]	; (8000524 <I2C1_burstRead+0x140>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <I2C1_burstRead+0x140>)
 800046e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000472:	6013      	str	r3, [r2, #0]
      while (!(I2C1->SR1 & 1));               /* wait until start flag is set */
 8000474:	bf00      	nop
 8000476:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <I2C1_burstRead+0x140>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	2b00      	cmp	r3, #0
 8000480:	d0f9      	beq.n	8000476 <I2C1_burstRead+0x92>
      I2C1->DR = saddr << 1 | 1;              /* transmit slave address + Read */
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	f043 0201 	orr.w	r2, r3, #1
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <I2C1_burstRead+0x140>)
 800048c:	611a      	str	r2, [r3, #16]
      while (!(I2C1->SR1 & 2));               /* wait until addr flag is set */
 800048e:	bf00      	nop
 8000490:	4b24      	ldr	r3, [pc, #144]	; (8000524 <I2C1_burstRead+0x140>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	f003 0302 	and.w	r3, r3, #2
 8000498:	2b00      	cmp	r3, #0
 800049a:	d0f9      	beq.n	8000490 <I2C1_burstRead+0xac>
      tmp = I2C1->SR2;                        /* clear addr flag */
 800049c:	4b21      	ldr	r3, [pc, #132]	; (8000524 <I2C1_burstRead+0x140>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	617b      	str	r3, [r7, #20]
      I2C1->CR1 |=  0x0400;                   /* Enable Acknowledge */
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <I2C1_burstRead+0x140>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a1f      	ldr	r2, [pc, #124]	; (8000524 <I2C1_burstRead+0x140>)
 80004a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ac:	6013      	str	r3, [r2, #0]

      while(n > 0)
 80004ae:	e02e      	b.n	800050e <I2C1_burstRead+0x12a>
      {
          /* One byte left */
          if(n == 1)
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d11a      	bne.n	80004ec <I2C1_burstRead+0x108>
          {
              I2C1->CR1 &= ~(0x400);          /* Disable Acknowledge */
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <I2C1_burstRead+0x140>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <I2C1_burstRead+0x140>)
 80004bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004c0:	6013      	str	r3, [r2, #0]
              I2C1->CR1 |= 0x200;             /* Generate Stop */
 80004c2:	4b18      	ldr	r3, [pc, #96]	; (8000524 <I2C1_burstRead+0x140>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <I2C1_burstRead+0x140>)
 80004c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004cc:	6013      	str	r3, [r2, #0]
              while (!(I2C1->SR1 & 0x40));    /* Wait for RXNE flag set */
 80004ce:	bf00      	nop
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <I2C1_burstRead+0x140>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f9      	beq.n	80004d0 <I2C1_burstRead+0xec>
              *data++ =I2C1->DR;             		// Read data from DR */
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <I2C1_burstRead+0x140>)
 80004de:	6919      	ldr	r1, [r3, #16]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
              break;
 80004ea:	e014      	b.n	8000516 <I2C1_burstRead+0x132>
          }
          else
          {
              while (!(I2C1->SR1 & 0x40));    /* Wait until RXNE flag is set */
 80004ec:	bf00      	nop
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <I2C1_burstRead+0x140>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d0f9      	beq.n	80004ee <I2C1_burstRead+0x10a>
              *data++ =I2C1->DR;           			// Read data from DR */
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <I2C1_burstRead+0x140>)
 80004fc:	6919      	ldr	r1, [r3, #16]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	b2ca      	uxtb	r2, r1
 8000506:	701a      	strb	r2, [r3, #0]
              n--;
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	3b01      	subs	r3, #1
 800050c:	60bb      	str	r3, [r7, #8]
      while(n > 0)
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	2b00      	cmp	r3, #0
 8000512:	dccd      	bgt.n	80004b0 <I2C1_burstRead+0xcc>
          }
      }
  }
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	371c      	adds	r7, #28
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40005400 	.word	0x40005400

08000528 <Get_Time>:

  void Get_Time()
  {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  	//uint8_t get_time[7];
  	I2C1_burstRead(SLAVE_ADDR, 0x00, 7, timeDateReadback);
 800052c:	4b23      	ldr	r3, [pc, #140]	; (80005bc <Get_Time+0x94>)
 800052e:	2207      	movs	r2, #7
 8000530:	2100      	movs	r1, #0
 8000532:	2068      	movs	r0, #104	; 0x68
 8000534:	f7ff ff56 	bl	80003e4 <I2C1_burstRead>

  	time.seconds = BCDtoDecimal(timeDateReadback[0]);		////conversion back
 8000538:	4b20      	ldr	r3, [pc, #128]	; (80005bc <Get_Time+0x94>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f861 	bl	8000604 <BCDtoDecimal>
 8000542:	4603      	mov	r3, r0
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <Get_Time+0x98>)
 8000548:	701a      	strb	r2, [r3, #0]
  	time.minutes = BCDtoDecimal(timeDateReadback[1]);
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <Get_Time+0x94>)
 800054c:	785b      	ldrb	r3, [r3, #1]
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f858 	bl	8000604 <BCDtoDecimal>
 8000554:	4603      	mov	r3, r0
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <Get_Time+0x98>)
 800055a:	705a      	strb	r2, [r3, #1]
  	time.hour = 	BCDtoDecimal(timeDateReadback[2]);
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <Get_Time+0x94>)
 800055e:	789b      	ldrb	r3, [r3, #2]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f84f 	bl	8000604 <BCDtoDecimal>
 8000566:	4603      	mov	r3, r0
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <Get_Time+0x98>)
 800056c:	709a      	strb	r2, [r3, #2]
  	time.dayofweek = BCDtoDecimal(timeDateReadback[3]);
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <Get_Time+0x94>)
 8000570:	78db      	ldrb	r3, [r3, #3]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f846 	bl	8000604 <BCDtoDecimal>
 8000578:	4603      	mov	r3, r0
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <Get_Time+0x98>)
 800057e:	70da      	strb	r2, [r3, #3]
  	time.dayofmonth = BCDtoDecimal(timeDateReadback[4]);
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <Get_Time+0x94>)
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f83d 	bl	8000604 <BCDtoDecimal>
 800058a:	4603      	mov	r3, r0
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <Get_Time+0x98>)
 8000590:	711a      	strb	r2, [r3, #4]
  	time.month = BCDtoDecimal(timeDateReadback[5]);
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <Get_Time+0x94>)
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f834 	bl	8000604 <BCDtoDecimal>
 800059c:	4603      	mov	r3, r0
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <Get_Time+0x98>)
 80005a2:	715a      	strb	r2, [r3, #5]
  	time.year = BCDtoDecimal(timeDateReadback[6]);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <Get_Time+0x94>)
 80005a6:	799b      	ldrb	r3, [r3, #6]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f82b 	bl	8000604 <BCDtoDecimal>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <Get_Time+0x98>)
 80005b4:	719a      	strb	r2, [r3, #6]
  }
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000084 	.word	0x20000084
 80005c0:	200000a4 	.word	0x200000a4

080005c4 <delay>:

  void delay(uint32_t  x)
  {
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  	for(int i=0;i<x;i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e00d      	b.n	80005ee <delay+0x2a>
  	{
  		for(int j=0;j<3000;j++);
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	e002      	b.n	80005de <delay+0x1a>
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	3301      	adds	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80005e4:	4293      	cmp	r3, r2
 80005e6:	ddf7      	ble.n	80005d8 <delay+0x14>
  	for(int i=0;i<x;i++)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d8ed      	bhi.n	80005d2 <delay+0xe>
  	}
  }
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <BCDtoDecimal>:

  int BCDtoDecimal(int BCD)
  {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  	return(((BCD>>4)*10) + (BCD & 0xf));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	111a      	asrs	r2, r3, #4
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	461a      	mov	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f003 030f 	and.w	r3, r3, #15
 8000620:	4413      	add	r3, r2
  }
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LCD_string>:



  void LCD_string(char str[])
  {
 800062e:	b580      	push	{r7, lr}
 8000630:	b084      	sub	sp, #16
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
  	for(int i=0;str[i]!='\0';i++)
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e009      	b.n	8000650 <LCD_string+0x22>
  	{
  		LCD_data(str[i]);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4413      	add	r3, r2
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 f8c3 	bl	80007d0 <LCD_data>
  	for(int i=0;str[i]!='\0';i++)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ef      	bne.n	800063c <LCD_string+0xe>
  	}

  }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <LCD_init>:
  /* initialize GPIOA/C then initialize LCD controller */
  void LCD_init(void)
  {
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  	PORTS_init();
 800066a:	f000 f82d 	bl	80006c8 <PORTS_init>
  	delay(20); /* LCD controller reset sequence */
 800066e:	2014      	movs	r0, #20
 8000670:	f7ff ffa8 	bl	80005c4 <delay>
  	LCD_nibble_write(0x30, 0);
 8000674:	2100      	movs	r1, #0
 8000676:	2030      	movs	r0, #48	; 0x30
 8000678:	f000 f858 	bl	800072c <LCD_nibble_write>
  	delay(5);
 800067c:	2005      	movs	r0, #5
 800067e:	f7ff ffa1 	bl	80005c4 <delay>
  	LCD_nibble_write(0x30, 0);
 8000682:	2100      	movs	r1, #0
 8000684:	2030      	movs	r0, #48	; 0x30
 8000686:	f000 f851 	bl	800072c <LCD_nibble_write>
  	delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ff9a 	bl	80005c4 <delay>
  	LCD_nibble_write(0x30, 0);
 8000690:	2100      	movs	r1, #0
 8000692:	2030      	movs	r0, #48	; 0x30
 8000694:	f000 f84a 	bl	800072c <LCD_nibble_write>
  	delay(1);
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ff93 	bl	80005c4 <delay>
  	LCD_nibble_write(0x20, 0); /* use 4-bit data mode */
 800069e:	2100      	movs	r1, #0
 80006a0:	2020      	movs	r0, #32
 80006a2:	f000 f843 	bl	800072c <LCD_nibble_write>
  	delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ff8c 	bl	80005c4 <delay>
  	LCD_command(0x28); /* set 4-bit data, 2-line, 5x7 font */
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f000 f86d 	bl	800078c <LCD_command>
  	LCD_command(0x06); /* move cursor right */
 80006b2:	2006      	movs	r0, #6
 80006b4:	f000 f86a 	bl	800078c <LCD_command>
  	LCD_command(0x01); /* clear screen, move cursor to home */
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 f867 	bl	800078c <LCD_command>
  	LCD_command(0x0F); /* turn on display, cursor blinking */
 80006be:	200f      	movs	r0, #15
 80006c0:	f000 f864 	bl	800078c <LCD_command>
  }
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <PORTS_init>:

  void PORTS_init(void)
  {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  		RCC->AHB1ENR |= 0x1;                     // Enable AHB1 BUS which is connected to PA5 via GPIO port A
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <PORTS_init+0x58>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a13      	ldr	r2, [pc, #76]	; (8000720 <PORTS_init+0x58>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
  		RCC->AHB1ENR |= 0x4;					// Enanle AHB1 bus conneted to GPIO port C
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <PORTS_init+0x58>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	4a10      	ldr	r2, [pc, #64]	; (8000720 <PORTS_init+0x58>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6313      	str	r3, [r2, #48]	; 0x30
  	//	RCC->AHB1ENR |=0x2;						//Enanle AHB1 bus conneted to GPIO port B
  		GPIOA->MODER &=~((3<<10) | (3<<14)); //0xCC00                //clear all pin PA5 PA6 PA7
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <PORTS_init+0x5c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <PORTS_init+0x5c>)
 80006ea:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 80006ee:	6013      	str	r3, [r2, #0]
  		GPIOA->MODER |=0x4400; 				//set all pin 5,6,7 as o/p mode
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <PORTS_init+0x5c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <PORTS_init+0x5c>)
 80006f6:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80006fa:	6013      	str	r3, [r2, #0]
  	//	GPIOA->BSRR = 0xC00000;	//(3<<22)			//turn off EN and RW pin
  		GPIOC->MODER &=~0xFF00;				// CLEAR all pin 4-7 of port C
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <PORTS_init+0x60>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <PORTS_init+0x60>)
 8000702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000706:	6013      	str	r3, [r2, #0]
  		GPIOC->MODER |= 0x5500;				// set all pin 4-7 as o/p mode
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <PORTS_init+0x60>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <PORTS_init+0x60>)
 800070e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000712:	6013      	str	r3, [r2, #0]


  }
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40020000 	.word	0x40020000
 8000728:	40020800 	.word	0x40020800

0800072c <LCD_nibble_write>:

  void LCD_nibble_write(char data, unsigned char control)
  {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
  	/*populate data bits */
  	GPIOC->BSRR = 0xF00000; 					/* reset the PC4-PC7 data bits */
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <LCD_nibble_write+0x58>)
 800073e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000742:	619a      	str	r2, [r3, #24]
  	GPIOC->BSRR = data & 0xF0; 					/* set data bits 4-7 */
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <LCD_nibble_write+0x58>)
 8000748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800074c:	6193      	str	r3, [r2, #24]
  	/* set R/S bit */
  	if (control & RS)
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	f003 0320 	and.w	r3, r3, #32
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <LCD_nibble_write+0x34>
  		GPIOA->BSRR = RS;
 8000758:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <LCD_nibble_write+0x5c>)
 800075a:	2220      	movs	r2, #32
 800075c:	619a      	str	r2, [r3, #24]
 800075e:	e003      	b.n	8000768 <LCD_nibble_write+0x3c>
  	else
  		GPIOA->BSRR = RS << 16;	//(1<<21)  //
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <LCD_nibble_write+0x5c>)
 8000762:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000766:	619a      	str	r2, [r3, #24]
  	/* pulse E */
  	GPIOA->BSRR = EN;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <LCD_nibble_write+0x5c>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	619a      	str	r2, [r3, #24]
  	delay(0);
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ff28 	bl	80005c4 <delay>
  	GPIOA->BSRR = EN << 16;
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <LCD_nibble_write+0x5c>)
 8000776:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077a:	619a      	str	r2, [r3, #24]
  }
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020800 	.word	0x40020800
 8000788:	40020000 	.word	0x40020000

0800078c <LCD_command>:
  void LCD_command(unsigned char command)
  {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
  	LCD_nibble_write(command & 0xF0, 0); 			/* upper nibble first */
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f023 030f 	bic.w	r3, r3, #15
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffc3 	bl	800072c <LCD_nibble_write>
  	LCD_nibble_write(command << 4, 0); 				/* then lower nibble */
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffbc 	bl	800072c <LCD_nibble_write>
  	if (command < 4)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d803      	bhi.n	80007c2 <LCD_command+0x36>
  		delay(2); 									/* command 1 and 2 needs up to 1.64ms */
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff ff02 	bl	80005c4 <delay>
  	else
  		delay(1); 									/* all others 40 us */

  }
 80007c0:	e002      	b.n	80007c8 <LCD_command+0x3c>
  		delay(1); 									/* all others 40 us */
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff fefe 	bl	80005c4 <delay>
  }
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <LCD_data>:
  void LCD_data(char data)
  {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  	LCD_nibble_write(data & 0xF0, RS); 				/* upper nibble first */
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f023 030f 	bic.w	r3, r3, #15
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2120      	movs	r1, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffa1 	bl	800072c <LCD_nibble_write>
  	LCD_nibble_write(data << 4, RS); 				/* then lower nibble */
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2120      	movs	r1, #32
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff9a 	bl	800072c <LCD_nibble_write>
  	delay(100);
 80007f8:	2064      	movs	r0, #100	; 0x64
 80007fa:	f7ff fee3 	bl	80005c4 <delay>
  }
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080a:	e7fe      	b.n	800080a <NMI_Handler+0x4>

0800080c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <HardFault_Handler+0x4>

08000812 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <MemManage_Handler+0x4>

08000818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <BusFault_Handler+0x4>

0800081e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f875 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f000 f86c 	bl	8000968 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20020000 	.word	0x20020000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	200000ac 	.word	0x200000ac
 80008c4:	200000c8 	.word	0x200000c8

080008c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000916:	f7ff ffd7 	bl	80008c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f000 f82b 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091e:	f7ff fcaf 	bl	8000280 <main>
  bx  lr    
 8000922:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000930:	0800131c 	.word	0x0800131c
  ldr r2, =_sbss
 8000934:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000938:	200000c4 	.word	0x200000c4

0800093c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000
 8000964:	200000b0 	.word	0x200000b0

08000968 <__errno>:
 8000968:	4b01      	ldr	r3, [pc, #4]	; (8000970 <__errno+0x8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000004 	.word	0x20000004

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4d0d      	ldr	r5, [pc, #52]	; (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	; (80009b0 <__libc_init_array+0x3c>)
 800097a:	1b64      	subs	r4, r4, r5
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2600      	movs	r6, #0
 8000980:	42a6      	cmp	r6, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4d0b      	ldr	r5, [pc, #44]	; (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	; (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 fc86 	bl	8001298 <_init>
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2600      	movs	r6, #0
 8000992:	42a6      	cmp	r6, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f855 3b04 	ldr.w	r3, [r5], #4
 800099c:	4798      	blx	r3
 800099e:	3601      	adds	r6, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a6:	4798      	blx	r3
 80009a8:	3601      	adds	r6, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	08001314 	.word	0x08001314
 80009b0:	08001314 	.word	0x08001314
 80009b4:	08001314 	.word	0x08001314
 80009b8:	08001318 	.word	0x08001318

080009bc <siprintf>:
 80009bc:	b40e      	push	{r1, r2, r3}
 80009be:	b500      	push	{lr}
 80009c0:	b09c      	sub	sp, #112	; 0x70
 80009c2:	ab1d      	add	r3, sp, #116	; 0x74
 80009c4:	9002      	str	r0, [sp, #8]
 80009c6:	9006      	str	r0, [sp, #24]
 80009c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <siprintf+0x38>)
 80009ce:	9107      	str	r1, [sp, #28]
 80009d0:	9104      	str	r1, [sp, #16]
 80009d2:	4909      	ldr	r1, [pc, #36]	; (80009f8 <siprintf+0x3c>)
 80009d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80009d8:	9105      	str	r1, [sp, #20]
 80009da:	6800      	ldr	r0, [r0, #0]
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	a902      	add	r1, sp, #8
 80009e0:	f000 f868 	bl	8000ab4 <_svfiprintf_r>
 80009e4:	9b02      	ldr	r3, [sp, #8]
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	b01c      	add	sp, #112	; 0x70
 80009ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80009f0:	b003      	add	sp, #12
 80009f2:	4770      	bx	lr
 80009f4:	20000004 	.word	0x20000004
 80009f8:	ffff0208 	.word	0xffff0208

080009fc <__ssputs_r>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	688e      	ldr	r6, [r1, #8]
 8000a02:	429e      	cmp	r6, r3
 8000a04:	4682      	mov	sl, r0
 8000a06:	460c      	mov	r4, r1
 8000a08:	4690      	mov	r8, r2
 8000a0a:	461f      	mov	r7, r3
 8000a0c:	d838      	bhi.n	8000a80 <__ssputs_r+0x84>
 8000a0e:	898a      	ldrh	r2, [r1, #12]
 8000a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a14:	d032      	beq.n	8000a7c <__ssputs_r+0x80>
 8000a16:	6825      	ldr	r5, [r4, #0]
 8000a18:	6909      	ldr	r1, [r1, #16]
 8000a1a:	eba5 0901 	sub.w	r9, r5, r1
 8000a1e:	6965      	ldr	r5, [r4, #20]
 8000a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a28:	3301      	adds	r3, #1
 8000a2a:	444b      	add	r3, r9
 8000a2c:	106d      	asrs	r5, r5, #1
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	bf38      	it	cc
 8000a32:	461d      	movcc	r5, r3
 8000a34:	0553      	lsls	r3, r2, #21
 8000a36:	d531      	bpl.n	8000a9c <__ssputs_r+0xa0>
 8000a38:	4629      	mov	r1, r5
 8000a3a:	f000 fb63 	bl	8001104 <_malloc_r>
 8000a3e:	4606      	mov	r6, r0
 8000a40:	b950      	cbnz	r0, 8000a58 <__ssputs_r+0x5c>
 8000a42:	230c      	movs	r3, #12
 8000a44:	f8ca 3000 	str.w	r3, [sl]
 8000a48:	89a3      	ldrh	r3, [r4, #12]
 8000a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a4e:	81a3      	strh	r3, [r4, #12]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a58:	6921      	ldr	r1, [r4, #16]
 8000a5a:	464a      	mov	r2, r9
 8000a5c:	f000 fabe 	bl	8000fdc <memcpy>
 8000a60:	89a3      	ldrh	r3, [r4, #12]
 8000a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6a:	81a3      	strh	r3, [r4, #12]
 8000a6c:	6126      	str	r6, [r4, #16]
 8000a6e:	6165      	str	r5, [r4, #20]
 8000a70:	444e      	add	r6, r9
 8000a72:	eba5 0509 	sub.w	r5, r5, r9
 8000a76:	6026      	str	r6, [r4, #0]
 8000a78:	60a5      	str	r5, [r4, #8]
 8000a7a:	463e      	mov	r6, r7
 8000a7c:	42be      	cmp	r6, r7
 8000a7e:	d900      	bls.n	8000a82 <__ssputs_r+0x86>
 8000a80:	463e      	mov	r6, r7
 8000a82:	6820      	ldr	r0, [r4, #0]
 8000a84:	4632      	mov	r2, r6
 8000a86:	4641      	mov	r1, r8
 8000a88:	f000 fab6 	bl	8000ff8 <memmove>
 8000a8c:	68a3      	ldr	r3, [r4, #8]
 8000a8e:	1b9b      	subs	r3, r3, r6
 8000a90:	60a3      	str	r3, [r4, #8]
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	4433      	add	r3, r6
 8000a96:	6023      	str	r3, [r4, #0]
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e7db      	b.n	8000a54 <__ssputs_r+0x58>
 8000a9c:	462a      	mov	r2, r5
 8000a9e:	f000 fba5 	bl	80011ec <_realloc_r>
 8000aa2:	4606      	mov	r6, r0
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d1e1      	bne.n	8000a6c <__ssputs_r+0x70>
 8000aa8:	6921      	ldr	r1, [r4, #16]
 8000aaa:	4650      	mov	r0, sl
 8000aac:	f000 fabe 	bl	800102c <_free_r>
 8000ab0:	e7c7      	b.n	8000a42 <__ssputs_r+0x46>
	...

08000ab4 <_svfiprintf_r>:
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	4698      	mov	r8, r3
 8000aba:	898b      	ldrh	r3, [r1, #12]
 8000abc:	061b      	lsls	r3, r3, #24
 8000abe:	b09d      	sub	sp, #116	; 0x74
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	460d      	mov	r5, r1
 8000ac4:	4614      	mov	r4, r2
 8000ac6:	d50e      	bpl.n	8000ae6 <_svfiprintf_r+0x32>
 8000ac8:	690b      	ldr	r3, [r1, #16]
 8000aca:	b963      	cbnz	r3, 8000ae6 <_svfiprintf_r+0x32>
 8000acc:	2140      	movs	r1, #64	; 0x40
 8000ace:	f000 fb19 	bl	8001104 <_malloc_r>
 8000ad2:	6028      	str	r0, [r5, #0]
 8000ad4:	6128      	str	r0, [r5, #16]
 8000ad6:	b920      	cbnz	r0, 8000ae2 <_svfiprintf_r+0x2e>
 8000ad8:	230c      	movs	r3, #12
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	e0d1      	b.n	8000c86 <_svfiprintf_r+0x1d2>
 8000ae2:	2340      	movs	r3, #64	; 0x40
 8000ae4:	616b      	str	r3, [r5, #20]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8000aea:	2320      	movs	r3, #32
 8000aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000af4:	2330      	movs	r3, #48	; 0x30
 8000af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000ca0 <_svfiprintf_r+0x1ec>
 8000afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000afe:	f04f 0901 	mov.w	r9, #1
 8000b02:	4623      	mov	r3, r4
 8000b04:	469a      	mov	sl, r3
 8000b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b0a:	b10a      	cbz	r2, 8000b10 <_svfiprintf_r+0x5c>
 8000b0c:	2a25      	cmp	r2, #37	; 0x25
 8000b0e:	d1f9      	bne.n	8000b04 <_svfiprintf_r+0x50>
 8000b10:	ebba 0b04 	subs.w	fp, sl, r4
 8000b14:	d00b      	beq.n	8000b2e <_svfiprintf_r+0x7a>
 8000b16:	465b      	mov	r3, fp
 8000b18:	4622      	mov	r2, r4
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	f7ff ff6d 	bl	80009fc <__ssputs_r>
 8000b22:	3001      	adds	r0, #1
 8000b24:	f000 80aa 	beq.w	8000c7c <_svfiprintf_r+0x1c8>
 8000b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b2a:	445a      	add	r2, fp
 8000b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8000b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 80a2 	beq.w	8000c7c <_svfiprintf_r+0x1c8>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b42:	f10a 0a01 	add.w	sl, sl, #1
 8000b46:	9304      	str	r3, [sp, #16]
 8000b48:	9307      	str	r3, [sp, #28]
 8000b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8000b50:	4654      	mov	r4, sl
 8000b52:	2205      	movs	r2, #5
 8000b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b58:	4851      	ldr	r0, [pc, #324]	; (8000ca0 <_svfiprintf_r+0x1ec>)
 8000b5a:	f7ff fb41 	bl	80001e0 <memchr>
 8000b5e:	9a04      	ldr	r2, [sp, #16]
 8000b60:	b9d8      	cbnz	r0, 8000b9a <_svfiprintf_r+0xe6>
 8000b62:	06d0      	lsls	r0, r2, #27
 8000b64:	bf44      	itt	mi
 8000b66:	2320      	movmi	r3, #32
 8000b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b6c:	0711      	lsls	r1, r2, #28
 8000b6e:	bf44      	itt	mi
 8000b70:	232b      	movmi	r3, #43	; 0x2b
 8000b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b76:	f89a 3000 	ldrb.w	r3, [sl]
 8000b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8000b7c:	d015      	beq.n	8000baa <_svfiprintf_r+0xf6>
 8000b7e:	9a07      	ldr	r2, [sp, #28]
 8000b80:	4654      	mov	r4, sl
 8000b82:	2000      	movs	r0, #0
 8000b84:	f04f 0c0a 	mov.w	ip, #10
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b8e:	3b30      	subs	r3, #48	; 0x30
 8000b90:	2b09      	cmp	r3, #9
 8000b92:	d94e      	bls.n	8000c32 <_svfiprintf_r+0x17e>
 8000b94:	b1b0      	cbz	r0, 8000bc4 <_svfiprintf_r+0x110>
 8000b96:	9207      	str	r2, [sp, #28]
 8000b98:	e014      	b.n	8000bc4 <_svfiprintf_r+0x110>
 8000b9a:	eba0 0308 	sub.w	r3, r0, r8
 8000b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	9304      	str	r3, [sp, #16]
 8000ba6:	46a2      	mov	sl, r4
 8000ba8:	e7d2      	b.n	8000b50 <_svfiprintf_r+0x9c>
 8000baa:	9b03      	ldr	r3, [sp, #12]
 8000bac:	1d19      	adds	r1, r3, #4
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	9103      	str	r1, [sp, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bfbb      	ittet	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8000bbc:	9307      	strge	r3, [sp, #28]
 8000bbe:	9307      	strlt	r3, [sp, #28]
 8000bc0:	bfb8      	it	lt
 8000bc2:	9204      	strlt	r2, [sp, #16]
 8000bc4:	7823      	ldrb	r3, [r4, #0]
 8000bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000bc8:	d10c      	bne.n	8000be4 <_svfiprintf_r+0x130>
 8000bca:	7863      	ldrb	r3, [r4, #1]
 8000bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8000bce:	d135      	bne.n	8000c3c <_svfiprintf_r+0x188>
 8000bd0:	9b03      	ldr	r3, [sp, #12]
 8000bd2:	1d1a      	adds	r2, r3, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	9203      	str	r2, [sp, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	bfb8      	it	lt
 8000bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8000be0:	3402      	adds	r4, #2
 8000be2:	9305      	str	r3, [sp, #20]
 8000be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000cb0 <_svfiprintf_r+0x1fc>
 8000be8:	7821      	ldrb	r1, [r4, #0]
 8000bea:	2203      	movs	r2, #3
 8000bec:	4650      	mov	r0, sl
 8000bee:	f7ff faf7 	bl	80001e0 <memchr>
 8000bf2:	b140      	cbz	r0, 8000c06 <_svfiprintf_r+0x152>
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	eba0 000a 	sub.w	r0, r0, sl
 8000bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8000bfe:	9b04      	ldr	r3, [sp, #16]
 8000c00:	4303      	orrs	r3, r0
 8000c02:	3401      	adds	r4, #1
 8000c04:	9304      	str	r3, [sp, #16]
 8000c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c0a:	4826      	ldr	r0, [pc, #152]	; (8000ca4 <_svfiprintf_r+0x1f0>)
 8000c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c10:	2206      	movs	r2, #6
 8000c12:	f7ff fae5 	bl	80001e0 <memchr>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d038      	beq.n	8000c8c <_svfiprintf_r+0x1d8>
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <_svfiprintf_r+0x1f4>)
 8000c1c:	bb1b      	cbnz	r3, 8000c66 <_svfiprintf_r+0x1b2>
 8000c1e:	9b03      	ldr	r3, [sp, #12]
 8000c20:	3307      	adds	r3, #7
 8000c22:	f023 0307 	bic.w	r3, r3, #7
 8000c26:	3308      	adds	r3, #8
 8000c28:	9303      	str	r3, [sp, #12]
 8000c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c2c:	4433      	add	r3, r6
 8000c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c30:	e767      	b.n	8000b02 <_svfiprintf_r+0x4e>
 8000c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c36:	460c      	mov	r4, r1
 8000c38:	2001      	movs	r0, #1
 8000c3a:	e7a5      	b.n	8000b88 <_svfiprintf_r+0xd4>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	3401      	adds	r4, #1
 8000c40:	9305      	str	r3, [sp, #20]
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 0c0a 	mov.w	ip, #10
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c4e:	3a30      	subs	r2, #48	; 0x30
 8000c50:	2a09      	cmp	r2, #9
 8000c52:	d903      	bls.n	8000c5c <_svfiprintf_r+0x1a8>
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0c5      	beq.n	8000be4 <_svfiprintf_r+0x130>
 8000c58:	9105      	str	r1, [sp, #20]
 8000c5a:	e7c3      	b.n	8000be4 <_svfiprintf_r+0x130>
 8000c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c60:	4604      	mov	r4, r0
 8000c62:	2301      	movs	r3, #1
 8000c64:	e7f0      	b.n	8000c48 <_svfiprintf_r+0x194>
 8000c66:	ab03      	add	r3, sp, #12
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	462a      	mov	r2, r5
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <_svfiprintf_r+0x1f8>)
 8000c6e:	a904      	add	r1, sp, #16
 8000c70:	4638      	mov	r0, r7
 8000c72:	f3af 8000 	nop.w
 8000c76:	1c42      	adds	r2, r0, #1
 8000c78:	4606      	mov	r6, r0
 8000c7a:	d1d6      	bne.n	8000c2a <_svfiprintf_r+0x176>
 8000c7c:	89ab      	ldrh	r3, [r5, #12]
 8000c7e:	065b      	lsls	r3, r3, #25
 8000c80:	f53f af2c 	bmi.w	8000adc <_svfiprintf_r+0x28>
 8000c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c86:	b01d      	add	sp, #116	; 0x74
 8000c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c8c:	ab03      	add	r3, sp, #12
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	462a      	mov	r2, r5
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <_svfiprintf_r+0x1f8>)
 8000c94:	a904      	add	r1, sp, #16
 8000c96:	4638      	mov	r0, r7
 8000c98:	f000 f87a 	bl	8000d90 <_printf_i>
 8000c9c:	e7eb      	b.n	8000c76 <_svfiprintf_r+0x1c2>
 8000c9e:	bf00      	nop
 8000ca0:	080012e1 	.word	0x080012e1
 8000ca4:	080012eb 	.word	0x080012eb
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	080009fd 	.word	0x080009fd
 8000cb0:	080012e7 	.word	0x080012e7

08000cb4 <_printf_common>:
 8000cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb8:	4616      	mov	r6, r2
 8000cba:	4699      	mov	r9, r3
 8000cbc:	688a      	ldr	r2, [r1, #8]
 8000cbe:	690b      	ldr	r3, [r1, #16]
 8000cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	bfb8      	it	lt
 8000cc8:	4613      	movlt	r3, r2
 8000cca:	6033      	str	r3, [r6, #0]
 8000ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cd0:	4607      	mov	r7, r0
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	b10a      	cbz	r2, 8000cda <_printf_common+0x26>
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	6033      	str	r3, [r6, #0]
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	0699      	lsls	r1, r3, #26
 8000cde:	bf42      	ittt	mi
 8000ce0:	6833      	ldrmi	r3, [r6, #0]
 8000ce2:	3302      	addmi	r3, #2
 8000ce4:	6033      	strmi	r3, [r6, #0]
 8000ce6:	6825      	ldr	r5, [r4, #0]
 8000ce8:	f015 0506 	ands.w	r5, r5, #6
 8000cec:	d106      	bne.n	8000cfc <_printf_common+0x48>
 8000cee:	f104 0a19 	add.w	sl, r4, #25
 8000cf2:	68e3      	ldr	r3, [r4, #12]
 8000cf4:	6832      	ldr	r2, [r6, #0]
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	dc26      	bgt.n	8000d4a <_printf_common+0x96>
 8000cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d00:	1e13      	subs	r3, r2, #0
 8000d02:	6822      	ldr	r2, [r4, #0]
 8000d04:	bf18      	it	ne
 8000d06:	2301      	movne	r3, #1
 8000d08:	0692      	lsls	r2, r2, #26
 8000d0a:	d42b      	bmi.n	8000d64 <_printf_common+0xb0>
 8000d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d10:	4649      	mov	r1, r9
 8000d12:	4638      	mov	r0, r7
 8000d14:	47c0      	blx	r8
 8000d16:	3001      	adds	r0, #1
 8000d18:	d01e      	beq.n	8000d58 <_printf_common+0xa4>
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	68e5      	ldr	r5, [r4, #12]
 8000d1e:	6832      	ldr	r2, [r6, #0]
 8000d20:	f003 0306 	and.w	r3, r3, #6
 8000d24:	2b04      	cmp	r3, #4
 8000d26:	bf08      	it	eq
 8000d28:	1aad      	subeq	r5, r5, r2
 8000d2a:	68a3      	ldr	r3, [r4, #8]
 8000d2c:	6922      	ldr	r2, [r4, #16]
 8000d2e:	bf0c      	ite	eq
 8000d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d34:	2500      	movne	r5, #0
 8000d36:	4293      	cmp	r3, r2
 8000d38:	bfc4      	itt	gt
 8000d3a:	1a9b      	subgt	r3, r3, r2
 8000d3c:	18ed      	addgt	r5, r5, r3
 8000d3e:	2600      	movs	r6, #0
 8000d40:	341a      	adds	r4, #26
 8000d42:	42b5      	cmp	r5, r6
 8000d44:	d11a      	bne.n	8000d7c <_printf_common+0xc8>
 8000d46:	2000      	movs	r0, #0
 8000d48:	e008      	b.n	8000d5c <_printf_common+0xa8>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	4649      	mov	r1, r9
 8000d50:	4638      	mov	r0, r7
 8000d52:	47c0      	blx	r8
 8000d54:	3001      	adds	r0, #1
 8000d56:	d103      	bne.n	8000d60 <_printf_common+0xac>
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	3501      	adds	r5, #1
 8000d62:	e7c6      	b.n	8000cf2 <_printf_common+0x3e>
 8000d64:	18e1      	adds	r1, r4, r3
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	2030      	movs	r0, #48	; 0x30
 8000d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d6e:	4422      	add	r2, r4
 8000d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d78:	3302      	adds	r3, #2
 8000d7a:	e7c7      	b.n	8000d0c <_printf_common+0x58>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4622      	mov	r2, r4
 8000d80:	4649      	mov	r1, r9
 8000d82:	4638      	mov	r0, r7
 8000d84:	47c0      	blx	r8
 8000d86:	3001      	adds	r0, #1
 8000d88:	d0e6      	beq.n	8000d58 <_printf_common+0xa4>
 8000d8a:	3601      	adds	r6, #1
 8000d8c:	e7d9      	b.n	8000d42 <_printf_common+0x8e>
	...

08000d90 <_printf_i>:
 8000d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d94:	7e0f      	ldrb	r7, [r1, #24]
 8000d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d98:	2f78      	cmp	r7, #120	; 0x78
 8000d9a:	4691      	mov	r9, r2
 8000d9c:	4680      	mov	r8, r0
 8000d9e:	460c      	mov	r4, r1
 8000da0:	469a      	mov	sl, r3
 8000da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000da6:	d807      	bhi.n	8000db8 <_printf_i+0x28>
 8000da8:	2f62      	cmp	r7, #98	; 0x62
 8000daa:	d80a      	bhi.n	8000dc2 <_printf_i+0x32>
 8000dac:	2f00      	cmp	r7, #0
 8000dae:	f000 80d8 	beq.w	8000f62 <_printf_i+0x1d2>
 8000db2:	2f58      	cmp	r7, #88	; 0x58
 8000db4:	f000 80a3 	beq.w	8000efe <_printf_i+0x16e>
 8000db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000dc0:	e03a      	b.n	8000e38 <_printf_i+0xa8>
 8000dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000dc6:	2b15      	cmp	r3, #21
 8000dc8:	d8f6      	bhi.n	8000db8 <_printf_i+0x28>
 8000dca:	a101      	add	r1, pc, #4	; (adr r1, 8000dd0 <_printf_i+0x40>)
 8000dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dd0:	08000e29 	.word	0x08000e29
 8000dd4:	08000e3d 	.word	0x08000e3d
 8000dd8:	08000db9 	.word	0x08000db9
 8000ddc:	08000db9 	.word	0x08000db9
 8000de0:	08000db9 	.word	0x08000db9
 8000de4:	08000db9 	.word	0x08000db9
 8000de8:	08000e3d 	.word	0x08000e3d
 8000dec:	08000db9 	.word	0x08000db9
 8000df0:	08000db9 	.word	0x08000db9
 8000df4:	08000db9 	.word	0x08000db9
 8000df8:	08000db9 	.word	0x08000db9
 8000dfc:	08000f49 	.word	0x08000f49
 8000e00:	08000e6d 	.word	0x08000e6d
 8000e04:	08000f2b 	.word	0x08000f2b
 8000e08:	08000db9 	.word	0x08000db9
 8000e0c:	08000db9 	.word	0x08000db9
 8000e10:	08000f6b 	.word	0x08000f6b
 8000e14:	08000db9 	.word	0x08000db9
 8000e18:	08000e6d 	.word	0x08000e6d
 8000e1c:	08000db9 	.word	0x08000db9
 8000e20:	08000db9 	.word	0x08000db9
 8000e24:	08000f33 	.word	0x08000f33
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	1d1a      	adds	r2, r3, #4
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	602a      	str	r2, [r5, #0]
 8000e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e0a3      	b.n	8000f84 <_printf_i+0x1f4>
 8000e3c:	6820      	ldr	r0, [r4, #0]
 8000e3e:	6829      	ldr	r1, [r5, #0]
 8000e40:	0606      	lsls	r6, r0, #24
 8000e42:	f101 0304 	add.w	r3, r1, #4
 8000e46:	d50a      	bpl.n	8000e5e <_printf_i+0xce>
 8000e48:	680e      	ldr	r6, [r1, #0]
 8000e4a:	602b      	str	r3, [r5, #0]
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	da03      	bge.n	8000e58 <_printf_i+0xc8>
 8000e50:	232d      	movs	r3, #45	; 0x2d
 8000e52:	4276      	negs	r6, r6
 8000e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e58:	485e      	ldr	r0, [pc, #376]	; (8000fd4 <_printf_i+0x244>)
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	e019      	b.n	8000e92 <_printf_i+0x102>
 8000e5e:	680e      	ldr	r6, [r1, #0]
 8000e60:	602b      	str	r3, [r5, #0]
 8000e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000e66:	bf18      	it	ne
 8000e68:	b236      	sxthne	r6, r6
 8000e6a:	e7ef      	b.n	8000e4c <_printf_i+0xbc>
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	1d19      	adds	r1, r3, #4
 8000e72:	6029      	str	r1, [r5, #0]
 8000e74:	0601      	lsls	r1, r0, #24
 8000e76:	d501      	bpl.n	8000e7c <_printf_i+0xec>
 8000e78:	681e      	ldr	r6, [r3, #0]
 8000e7a:	e002      	b.n	8000e82 <_printf_i+0xf2>
 8000e7c:	0646      	lsls	r6, r0, #25
 8000e7e:	d5fb      	bpl.n	8000e78 <_printf_i+0xe8>
 8000e80:	881e      	ldrh	r6, [r3, #0]
 8000e82:	4854      	ldr	r0, [pc, #336]	; (8000fd4 <_printf_i+0x244>)
 8000e84:	2f6f      	cmp	r7, #111	; 0x6f
 8000e86:	bf0c      	ite	eq
 8000e88:	2308      	moveq	r3, #8
 8000e8a:	230a      	movne	r3, #10
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e92:	6865      	ldr	r5, [r4, #4]
 8000e94:	60a5      	str	r5, [r4, #8]
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	bfa2      	ittt	ge
 8000e9a:	6821      	ldrge	r1, [r4, #0]
 8000e9c:	f021 0104 	bicge.w	r1, r1, #4
 8000ea0:	6021      	strge	r1, [r4, #0]
 8000ea2:	b90e      	cbnz	r6, 8000ea8 <_printf_i+0x118>
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d04d      	beq.n	8000f44 <_printf_i+0x1b4>
 8000ea8:	4615      	mov	r5, r2
 8000eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8000eae:	fb03 6711 	mls	r7, r3, r1, r6
 8000eb2:	5dc7      	ldrb	r7, [r0, r7]
 8000eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000eb8:	4637      	mov	r7, r6
 8000eba:	42bb      	cmp	r3, r7
 8000ebc:	460e      	mov	r6, r1
 8000ebe:	d9f4      	bls.n	8000eaa <_printf_i+0x11a>
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d10b      	bne.n	8000edc <_printf_i+0x14c>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	07de      	lsls	r6, r3, #31
 8000ec8:	d508      	bpl.n	8000edc <_printf_i+0x14c>
 8000eca:	6923      	ldr	r3, [r4, #16]
 8000ecc:	6861      	ldr	r1, [r4, #4]
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	bfde      	ittt	le
 8000ed2:	2330      	movle	r3, #48	; 0x30
 8000ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000edc:	1b52      	subs	r2, r2, r5
 8000ede:	6122      	str	r2, [r4, #16]
 8000ee0:	f8cd a000 	str.w	sl, [sp]
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	aa03      	add	r2, sp, #12
 8000ee8:	4621      	mov	r1, r4
 8000eea:	4640      	mov	r0, r8
 8000eec:	f7ff fee2 	bl	8000cb4 <_printf_common>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d14c      	bne.n	8000f8e <_printf_i+0x1fe>
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	b004      	add	sp, #16
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	4835      	ldr	r0, [pc, #212]	; (8000fd4 <_printf_i+0x244>)
 8000f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f04:	6829      	ldr	r1, [r5, #0]
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f0c:	6029      	str	r1, [r5, #0]
 8000f0e:	061d      	lsls	r5, r3, #24
 8000f10:	d514      	bpl.n	8000f3c <_printf_i+0x1ac>
 8000f12:	07df      	lsls	r7, r3, #31
 8000f14:	bf44      	itt	mi
 8000f16:	f043 0320 	orrmi.w	r3, r3, #32
 8000f1a:	6023      	strmi	r3, [r4, #0]
 8000f1c:	b91e      	cbnz	r6, 8000f26 <_printf_i+0x196>
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	f023 0320 	bic.w	r3, r3, #32
 8000f24:	6023      	str	r3, [r4, #0]
 8000f26:	2310      	movs	r3, #16
 8000f28:	e7b0      	b.n	8000e8c <_printf_i+0xfc>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	f043 0320 	orr.w	r3, r3, #32
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	2378      	movs	r3, #120	; 0x78
 8000f34:	4828      	ldr	r0, [pc, #160]	; (8000fd8 <_printf_i+0x248>)
 8000f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f3a:	e7e3      	b.n	8000f04 <_printf_i+0x174>
 8000f3c:	0659      	lsls	r1, r3, #25
 8000f3e:	bf48      	it	mi
 8000f40:	b2b6      	uxthmi	r6, r6
 8000f42:	e7e6      	b.n	8000f12 <_printf_i+0x182>
 8000f44:	4615      	mov	r5, r2
 8000f46:	e7bb      	b.n	8000ec0 <_printf_i+0x130>
 8000f48:	682b      	ldr	r3, [r5, #0]
 8000f4a:	6826      	ldr	r6, [r4, #0]
 8000f4c:	6961      	ldr	r1, [r4, #20]
 8000f4e:	1d18      	adds	r0, r3, #4
 8000f50:	6028      	str	r0, [r5, #0]
 8000f52:	0635      	lsls	r5, r6, #24
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	d501      	bpl.n	8000f5c <_printf_i+0x1cc>
 8000f58:	6019      	str	r1, [r3, #0]
 8000f5a:	e002      	b.n	8000f62 <_printf_i+0x1d2>
 8000f5c:	0670      	lsls	r0, r6, #25
 8000f5e:	d5fb      	bpl.n	8000f58 <_printf_i+0x1c8>
 8000f60:	8019      	strh	r1, [r3, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	6123      	str	r3, [r4, #16]
 8000f66:	4615      	mov	r5, r2
 8000f68:	e7ba      	b.n	8000ee0 <_printf_i+0x150>
 8000f6a:	682b      	ldr	r3, [r5, #0]
 8000f6c:	1d1a      	adds	r2, r3, #4
 8000f6e:	602a      	str	r2, [r5, #0]
 8000f70:	681d      	ldr	r5, [r3, #0]
 8000f72:	6862      	ldr	r2, [r4, #4]
 8000f74:	2100      	movs	r1, #0
 8000f76:	4628      	mov	r0, r5
 8000f78:	f7ff f932 	bl	80001e0 <memchr>
 8000f7c:	b108      	cbz	r0, 8000f82 <_printf_i+0x1f2>
 8000f7e:	1b40      	subs	r0, r0, r5
 8000f80:	6060      	str	r0, [r4, #4]
 8000f82:	6863      	ldr	r3, [r4, #4]
 8000f84:	6123      	str	r3, [r4, #16]
 8000f86:	2300      	movs	r3, #0
 8000f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f8c:	e7a8      	b.n	8000ee0 <_printf_i+0x150>
 8000f8e:	6923      	ldr	r3, [r4, #16]
 8000f90:	462a      	mov	r2, r5
 8000f92:	4649      	mov	r1, r9
 8000f94:	4640      	mov	r0, r8
 8000f96:	47d0      	blx	sl
 8000f98:	3001      	adds	r0, #1
 8000f9a:	d0ab      	beq.n	8000ef4 <_printf_i+0x164>
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	079b      	lsls	r3, r3, #30
 8000fa0:	d413      	bmi.n	8000fca <_printf_i+0x23a>
 8000fa2:	68e0      	ldr	r0, [r4, #12]
 8000fa4:	9b03      	ldr	r3, [sp, #12]
 8000fa6:	4298      	cmp	r0, r3
 8000fa8:	bfb8      	it	lt
 8000faa:	4618      	movlt	r0, r3
 8000fac:	e7a4      	b.n	8000ef8 <_printf_i+0x168>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4632      	mov	r2, r6
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	47d0      	blx	sl
 8000fb8:	3001      	adds	r0, #1
 8000fba:	d09b      	beq.n	8000ef4 <_printf_i+0x164>
 8000fbc:	3501      	adds	r5, #1
 8000fbe:	68e3      	ldr	r3, [r4, #12]
 8000fc0:	9903      	ldr	r1, [sp, #12]
 8000fc2:	1a5b      	subs	r3, r3, r1
 8000fc4:	42ab      	cmp	r3, r5
 8000fc6:	dcf2      	bgt.n	8000fae <_printf_i+0x21e>
 8000fc8:	e7eb      	b.n	8000fa2 <_printf_i+0x212>
 8000fca:	2500      	movs	r5, #0
 8000fcc:	f104 0619 	add.w	r6, r4, #25
 8000fd0:	e7f5      	b.n	8000fbe <_printf_i+0x22e>
 8000fd2:	bf00      	nop
 8000fd4:	080012f2 	.word	0x080012f2
 8000fd8:	08001303 	.word	0x08001303

08000fdc <memcpy>:
 8000fdc:	440a      	add	r2, r1
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe4:	d100      	bne.n	8000fe8 <memcpy+0xc>
 8000fe6:	4770      	bx	lr
 8000fe8:	b510      	push	{r4, lr}
 8000fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d1f9      	bne.n	8000fea <memcpy+0xe>
 8000ff6:	bd10      	pop	{r4, pc}

08000ff8 <memmove>:
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	b510      	push	{r4, lr}
 8000ffc:	eb01 0402 	add.w	r4, r1, r2
 8001000:	d902      	bls.n	8001008 <memmove+0x10>
 8001002:	4284      	cmp	r4, r0
 8001004:	4623      	mov	r3, r4
 8001006:	d807      	bhi.n	8001018 <memmove+0x20>
 8001008:	1e43      	subs	r3, r0, #1
 800100a:	42a1      	cmp	r1, r4
 800100c:	d008      	beq.n	8001020 <memmove+0x28>
 800100e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001016:	e7f8      	b.n	800100a <memmove+0x12>
 8001018:	4402      	add	r2, r0
 800101a:	4601      	mov	r1, r0
 800101c:	428a      	cmp	r2, r1
 800101e:	d100      	bne.n	8001022 <memmove+0x2a>
 8001020:	bd10      	pop	{r4, pc}
 8001022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800102a:	e7f7      	b.n	800101c <memmove+0x24>

0800102c <_free_r>:
 800102c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800102e:	2900      	cmp	r1, #0
 8001030:	d044      	beq.n	80010bc <_free_r+0x90>
 8001032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001036:	9001      	str	r0, [sp, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	f1a1 0404 	sub.w	r4, r1, #4
 800103e:	bfb8      	it	lt
 8001040:	18e4      	addlt	r4, r4, r3
 8001042:	f000 f913 	bl	800126c <__malloc_lock>
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <_free_r+0x94>)
 8001048:	9801      	ldr	r0, [sp, #4]
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	b933      	cbnz	r3, 800105c <_free_r+0x30>
 800104e:	6063      	str	r3, [r4, #4]
 8001050:	6014      	str	r4, [r2, #0]
 8001052:	b003      	add	sp, #12
 8001054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001058:	f000 b90e 	b.w	8001278 <__malloc_unlock>
 800105c:	42a3      	cmp	r3, r4
 800105e:	d908      	bls.n	8001072 <_free_r+0x46>
 8001060:	6825      	ldr	r5, [r4, #0]
 8001062:	1961      	adds	r1, r4, r5
 8001064:	428b      	cmp	r3, r1
 8001066:	bf01      	itttt	eq
 8001068:	6819      	ldreq	r1, [r3, #0]
 800106a:	685b      	ldreq	r3, [r3, #4]
 800106c:	1949      	addeq	r1, r1, r5
 800106e:	6021      	streq	r1, [r4, #0]
 8001070:	e7ed      	b.n	800104e <_free_r+0x22>
 8001072:	461a      	mov	r2, r3
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	b10b      	cbz	r3, 800107c <_free_r+0x50>
 8001078:	42a3      	cmp	r3, r4
 800107a:	d9fa      	bls.n	8001072 <_free_r+0x46>
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	1855      	adds	r5, r2, r1
 8001080:	42a5      	cmp	r5, r4
 8001082:	d10b      	bne.n	800109c <_free_r+0x70>
 8001084:	6824      	ldr	r4, [r4, #0]
 8001086:	4421      	add	r1, r4
 8001088:	1854      	adds	r4, r2, r1
 800108a:	42a3      	cmp	r3, r4
 800108c:	6011      	str	r1, [r2, #0]
 800108e:	d1e0      	bne.n	8001052 <_free_r+0x26>
 8001090:	681c      	ldr	r4, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	6053      	str	r3, [r2, #4]
 8001096:	4421      	add	r1, r4
 8001098:	6011      	str	r1, [r2, #0]
 800109a:	e7da      	b.n	8001052 <_free_r+0x26>
 800109c:	d902      	bls.n	80010a4 <_free_r+0x78>
 800109e:	230c      	movs	r3, #12
 80010a0:	6003      	str	r3, [r0, #0]
 80010a2:	e7d6      	b.n	8001052 <_free_r+0x26>
 80010a4:	6825      	ldr	r5, [r4, #0]
 80010a6:	1961      	adds	r1, r4, r5
 80010a8:	428b      	cmp	r3, r1
 80010aa:	bf04      	itt	eq
 80010ac:	6819      	ldreq	r1, [r3, #0]
 80010ae:	685b      	ldreq	r3, [r3, #4]
 80010b0:	6063      	str	r3, [r4, #4]
 80010b2:	bf04      	itt	eq
 80010b4:	1949      	addeq	r1, r1, r5
 80010b6:	6021      	streq	r1, [r4, #0]
 80010b8:	6054      	str	r4, [r2, #4]
 80010ba:	e7ca      	b.n	8001052 <_free_r+0x26>
 80010bc:	b003      	add	sp, #12
 80010be:	bd30      	pop	{r4, r5, pc}
 80010c0:	200000b4 	.word	0x200000b4

080010c4 <sbrk_aligned>:
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	4e0e      	ldr	r6, [pc, #56]	; (8001100 <sbrk_aligned+0x3c>)
 80010c8:	460c      	mov	r4, r1
 80010ca:	6831      	ldr	r1, [r6, #0]
 80010cc:	4605      	mov	r5, r0
 80010ce:	b911      	cbnz	r1, 80010d6 <sbrk_aligned+0x12>
 80010d0:	f000 f8bc 	bl	800124c <_sbrk_r>
 80010d4:	6030      	str	r0, [r6, #0]
 80010d6:	4621      	mov	r1, r4
 80010d8:	4628      	mov	r0, r5
 80010da:	f000 f8b7 	bl	800124c <_sbrk_r>
 80010de:	1c43      	adds	r3, r0, #1
 80010e0:	d00a      	beq.n	80010f8 <sbrk_aligned+0x34>
 80010e2:	1cc4      	adds	r4, r0, #3
 80010e4:	f024 0403 	bic.w	r4, r4, #3
 80010e8:	42a0      	cmp	r0, r4
 80010ea:	d007      	beq.n	80010fc <sbrk_aligned+0x38>
 80010ec:	1a21      	subs	r1, r4, r0
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 f8ac 	bl	800124c <_sbrk_r>
 80010f4:	3001      	adds	r0, #1
 80010f6:	d101      	bne.n	80010fc <sbrk_aligned+0x38>
 80010f8:	f04f 34ff 	mov.w	r4, #4294967295
 80010fc:	4620      	mov	r0, r4
 80010fe:	bd70      	pop	{r4, r5, r6, pc}
 8001100:	200000b8 	.word	0x200000b8

08001104 <_malloc_r>:
 8001104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001108:	1ccd      	adds	r5, r1, #3
 800110a:	f025 0503 	bic.w	r5, r5, #3
 800110e:	3508      	adds	r5, #8
 8001110:	2d0c      	cmp	r5, #12
 8001112:	bf38      	it	cc
 8001114:	250c      	movcc	r5, #12
 8001116:	2d00      	cmp	r5, #0
 8001118:	4607      	mov	r7, r0
 800111a:	db01      	blt.n	8001120 <_malloc_r+0x1c>
 800111c:	42a9      	cmp	r1, r5
 800111e:	d905      	bls.n	800112c <_malloc_r+0x28>
 8001120:	230c      	movs	r3, #12
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	2600      	movs	r6, #0
 8001126:	4630      	mov	r0, r6
 8001128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800112c:	4e2e      	ldr	r6, [pc, #184]	; (80011e8 <_malloc_r+0xe4>)
 800112e:	f000 f89d 	bl	800126c <__malloc_lock>
 8001132:	6833      	ldr	r3, [r6, #0]
 8001134:	461c      	mov	r4, r3
 8001136:	bb34      	cbnz	r4, 8001186 <_malloc_r+0x82>
 8001138:	4629      	mov	r1, r5
 800113a:	4638      	mov	r0, r7
 800113c:	f7ff ffc2 	bl	80010c4 <sbrk_aligned>
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	4604      	mov	r4, r0
 8001144:	d14d      	bne.n	80011e2 <_malloc_r+0xde>
 8001146:	6834      	ldr	r4, [r6, #0]
 8001148:	4626      	mov	r6, r4
 800114a:	2e00      	cmp	r6, #0
 800114c:	d140      	bne.n	80011d0 <_malloc_r+0xcc>
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	4631      	mov	r1, r6
 8001152:	4638      	mov	r0, r7
 8001154:	eb04 0803 	add.w	r8, r4, r3
 8001158:	f000 f878 	bl	800124c <_sbrk_r>
 800115c:	4580      	cmp	r8, r0
 800115e:	d13a      	bne.n	80011d6 <_malloc_r+0xd2>
 8001160:	6821      	ldr	r1, [r4, #0]
 8001162:	3503      	adds	r5, #3
 8001164:	1a6d      	subs	r5, r5, r1
 8001166:	f025 0503 	bic.w	r5, r5, #3
 800116a:	3508      	adds	r5, #8
 800116c:	2d0c      	cmp	r5, #12
 800116e:	bf38      	it	cc
 8001170:	250c      	movcc	r5, #12
 8001172:	4629      	mov	r1, r5
 8001174:	4638      	mov	r0, r7
 8001176:	f7ff ffa5 	bl	80010c4 <sbrk_aligned>
 800117a:	3001      	adds	r0, #1
 800117c:	d02b      	beq.n	80011d6 <_malloc_r+0xd2>
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	442b      	add	r3, r5
 8001182:	6023      	str	r3, [r4, #0]
 8001184:	e00e      	b.n	80011a4 <_malloc_r+0xa0>
 8001186:	6822      	ldr	r2, [r4, #0]
 8001188:	1b52      	subs	r2, r2, r5
 800118a:	d41e      	bmi.n	80011ca <_malloc_r+0xc6>
 800118c:	2a0b      	cmp	r2, #11
 800118e:	d916      	bls.n	80011be <_malloc_r+0xba>
 8001190:	1961      	adds	r1, r4, r5
 8001192:	42a3      	cmp	r3, r4
 8001194:	6025      	str	r5, [r4, #0]
 8001196:	bf18      	it	ne
 8001198:	6059      	strne	r1, [r3, #4]
 800119a:	6863      	ldr	r3, [r4, #4]
 800119c:	bf08      	it	eq
 800119e:	6031      	streq	r1, [r6, #0]
 80011a0:	5162      	str	r2, [r4, r5]
 80011a2:	604b      	str	r3, [r1, #4]
 80011a4:	4638      	mov	r0, r7
 80011a6:	f104 060b 	add.w	r6, r4, #11
 80011aa:	f000 f865 	bl	8001278 <__malloc_unlock>
 80011ae:	f026 0607 	bic.w	r6, r6, #7
 80011b2:	1d23      	adds	r3, r4, #4
 80011b4:	1af2      	subs	r2, r6, r3
 80011b6:	d0b6      	beq.n	8001126 <_malloc_r+0x22>
 80011b8:	1b9b      	subs	r3, r3, r6
 80011ba:	50a3      	str	r3, [r4, r2]
 80011bc:	e7b3      	b.n	8001126 <_malloc_r+0x22>
 80011be:	6862      	ldr	r2, [r4, #4]
 80011c0:	42a3      	cmp	r3, r4
 80011c2:	bf0c      	ite	eq
 80011c4:	6032      	streq	r2, [r6, #0]
 80011c6:	605a      	strne	r2, [r3, #4]
 80011c8:	e7ec      	b.n	80011a4 <_malloc_r+0xa0>
 80011ca:	4623      	mov	r3, r4
 80011cc:	6864      	ldr	r4, [r4, #4]
 80011ce:	e7b2      	b.n	8001136 <_malloc_r+0x32>
 80011d0:	4634      	mov	r4, r6
 80011d2:	6876      	ldr	r6, [r6, #4]
 80011d4:	e7b9      	b.n	800114a <_malloc_r+0x46>
 80011d6:	230c      	movs	r3, #12
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4638      	mov	r0, r7
 80011dc:	f000 f84c 	bl	8001278 <__malloc_unlock>
 80011e0:	e7a1      	b.n	8001126 <_malloc_r+0x22>
 80011e2:	6025      	str	r5, [r4, #0]
 80011e4:	e7de      	b.n	80011a4 <_malloc_r+0xa0>
 80011e6:	bf00      	nop
 80011e8:	200000b4 	.word	0x200000b4

080011ec <_realloc_r>:
 80011ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f0:	4680      	mov	r8, r0
 80011f2:	4614      	mov	r4, r2
 80011f4:	460e      	mov	r6, r1
 80011f6:	b921      	cbnz	r1, 8001202 <_realloc_r+0x16>
 80011f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011fc:	4611      	mov	r1, r2
 80011fe:	f7ff bf81 	b.w	8001104 <_malloc_r>
 8001202:	b92a      	cbnz	r2, 8001210 <_realloc_r+0x24>
 8001204:	f7ff ff12 	bl	800102c <_free_r>
 8001208:	4625      	mov	r5, r4
 800120a:	4628      	mov	r0, r5
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001210:	f000 f838 	bl	8001284 <_malloc_usable_size_r>
 8001214:	4284      	cmp	r4, r0
 8001216:	4607      	mov	r7, r0
 8001218:	d802      	bhi.n	8001220 <_realloc_r+0x34>
 800121a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800121e:	d812      	bhi.n	8001246 <_realloc_r+0x5a>
 8001220:	4621      	mov	r1, r4
 8001222:	4640      	mov	r0, r8
 8001224:	f7ff ff6e 	bl	8001104 <_malloc_r>
 8001228:	4605      	mov	r5, r0
 800122a:	2800      	cmp	r0, #0
 800122c:	d0ed      	beq.n	800120a <_realloc_r+0x1e>
 800122e:	42bc      	cmp	r4, r7
 8001230:	4622      	mov	r2, r4
 8001232:	4631      	mov	r1, r6
 8001234:	bf28      	it	cs
 8001236:	463a      	movcs	r2, r7
 8001238:	f7ff fed0 	bl	8000fdc <memcpy>
 800123c:	4631      	mov	r1, r6
 800123e:	4640      	mov	r0, r8
 8001240:	f7ff fef4 	bl	800102c <_free_r>
 8001244:	e7e1      	b.n	800120a <_realloc_r+0x1e>
 8001246:	4635      	mov	r5, r6
 8001248:	e7df      	b.n	800120a <_realloc_r+0x1e>
	...

0800124c <_sbrk_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4d06      	ldr	r5, [pc, #24]	; (8001268 <_sbrk_r+0x1c>)
 8001250:	2300      	movs	r3, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	602b      	str	r3, [r5, #0]
 8001258:	f7ff fb00 	bl	800085c <_sbrk>
 800125c:	1c43      	adds	r3, r0, #1
 800125e:	d102      	bne.n	8001266 <_sbrk_r+0x1a>
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	b103      	cbz	r3, 8001266 <_sbrk_r+0x1a>
 8001264:	6023      	str	r3, [r4, #0]
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200000bc 	.word	0x200000bc

0800126c <__malloc_lock>:
 800126c:	4801      	ldr	r0, [pc, #4]	; (8001274 <__malloc_lock+0x8>)
 800126e:	f000 b811 	b.w	8001294 <__retarget_lock_acquire_recursive>
 8001272:	bf00      	nop
 8001274:	200000c0 	.word	0x200000c0

08001278 <__malloc_unlock>:
 8001278:	4801      	ldr	r0, [pc, #4]	; (8001280 <__malloc_unlock+0x8>)
 800127a:	f000 b80c 	b.w	8001296 <__retarget_lock_release_recursive>
 800127e:	bf00      	nop
 8001280:	200000c0 	.word	0x200000c0

08001284 <_malloc_usable_size_r>:
 8001284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001288:	1f18      	subs	r0, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	bfbc      	itt	lt
 800128e:	580b      	ldrlt	r3, [r1, r0]
 8001290:	18c0      	addlt	r0, r0, r3
 8001292:	4770      	bx	lr

08001294 <__retarget_lock_acquire_recursive>:
 8001294:	4770      	bx	lr

08001296 <__retarget_lock_release_recursive>:
 8001296:	4770      	bx	lr

08001298 <_init>:
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	bf00      	nop
 800129c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129e:	bc08      	pop	{r3}
 80012a0:	469e      	mov	lr, r3
 80012a2:	4770      	bx	lr

080012a4 <_fini>:
 80012a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a6:	bf00      	nop
 80012a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012aa:	bc08      	pop	{r3}
 80012ac:	469e      	mov	lr, r3
 80012ae:	4770      	bx	lr
