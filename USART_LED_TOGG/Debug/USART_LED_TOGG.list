
USART_LED_TOGG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000280  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000420  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000420  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009cd  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000287  00000000  00000000  00010e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  000110a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00011138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b2c  00000000  00000000  000111a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000edc  00000000  00000000  00024ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f9c7  00000000  00000000  00025ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a556f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000a55c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000400 	.word	0x08000400

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000400 	.word	0x08000400

080001d8 <uart_read>:
 *      Author: PHY202209EF06
 */

#include"main.h"
unsigned char uart_read()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	while(!(USART2->SR & 0x20)){}
 80001dc:	bf00      	nop
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <uart_read+0x24>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f003 0320 	and.w	r3, r3, #32
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d0f9      	beq.n	80001de <uart_read+0x6>
	return USART2 -> DR;
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <uart_read+0x24>)
 80001ec:	685b      	ldr	r3, [r3, #4]
 80001ee:	b2db      	uxtb	r3, r3
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40004400 	.word	0x40004400

08000200 <delay>:
void delay(int T)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	int i;
	while(T--)
 8000208:	e009      	b.n	800021e <delay+0x1e>
	{
		for(i=0;i<100000;i++);
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
 800020e:	e002      	b.n	8000216 <delay+0x16>
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3301      	adds	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <delay+0x38>)
 800021a:	4293      	cmp	r3, r2
 800021c:	ddf8      	ble.n	8000210 <delay+0x10>
	while(T--)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	1e5a      	subs	r2, r3, #1
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d1f0      	bne.n	800020a <delay+0xa>
	}
}
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	0001869f 	.word	0x0001869f

0800023c <Sconfig_Init>:
void Sconfig_Init()
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |=0x20000;
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <Sconfig_Init+0x68>)
 8000242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <Sconfig_Init+0x68>)
 8000246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800024a:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |=0x1;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <Sconfig_Init+0x68>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a14      	ldr	r2, [pc, #80]	; (80002a4 <Sconfig_Init+0x68>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |=0xA0;
 8000258:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <Sconfig_Init+0x6c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a12      	ldr	r2, [pc, #72]	; (80002a8 <Sconfig_Init+0x6c>)
 800025e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |=0x7700;
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <Sconfig_Init+0x6c>)
 8000266:	6a1b      	ldr	r3, [r3, #32]
 8000268:	4a0f      	ldr	r2, [pc, #60]	; (80002a8 <Sconfig_Init+0x6c>)
 800026a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800026e:	6213      	str	r3, [r2, #32]
	USART2->BRR |=0x683;    //9600 Baudrate
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <Sconfig_Init+0x70>)
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	4a0d      	ldr	r2, [pc, #52]	; (80002ac <Sconfig_Init+0x70>)
 8000276:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 800027a:	f043 0303 	orr.w	r3, r3, #3
 800027e:	6093      	str	r3, [r2, #8]
	USART2->CR1 |= 0xC;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <Sconfig_Init+0x70>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a09      	ldr	r2, [pc, #36]	; (80002ac <Sconfig_Init+0x70>)
 8000286:	f043 030c 	orr.w	r3, r3, #12
 800028a:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= 0x2000;	// For UE
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <Sconfig_Init+0x70>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <Sconfig_Init+0x70>)
 8000292:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000296:	60d3      	str	r3, [r2, #12]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40004400 	.word	0x40004400

080002b0 <led_toggle>:
void led_toggle(int count)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	for(count%=10;count>0;count--)
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <led_toggle+0x64>)
 80002bc:	fb83 1302 	smull	r1, r3, r3, r2
 80002c0:	1099      	asrs	r1, r3, #2
 80002c2:	17d3      	asrs	r3, r2, #31
 80002c4:	1ac9      	subs	r1, r1, r3
 80002c6:	460b      	mov	r3, r1
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	440b      	add	r3, r1
 80002cc:	005b      	lsls	r3, r3, #1
 80002ce:	1ad3      	subs	r3, r2, r3
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	e016      	b.n	8000302 <led_toggle+0x52>
	{
		GPIOA->BSRR |= 0x20;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <led_toggle+0x68>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <led_toggle+0x68>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6193      	str	r3, [r2, #24]
		delay(1000);
 80002e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e4:	f7ff ff8c 	bl	8000200 <delay>
		GPIOA->BSRR |= 0x200000;
 80002e8:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <led_toggle+0x68>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <led_toggle+0x68>)
 80002ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002f2:	6193      	str	r3, [r2, #24]
		delay(1000);
 80002f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f8:	f7ff ff82 	bl	8000200 <delay>
	for(count%=10;count>0;count--)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b01      	subs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	dce5      	bgt.n	80002d4 <led_toggle+0x24>
	}
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3708      	adds	r7, #8
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	66666667 	.word	0x66666667
 8000318:	40020000 	.word	0x40020000

0800031c <main>:
char data;
int main()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	Sconfig_Init();
 8000320:	f7ff ff8c 	bl	800023c <Sconfig_Init>
	while(1)
	{
		data=uart_read();
 8000324:	f7ff ff58 	bl	80001d8 <uart_read>
 8000328:	4603      	mov	r3, r0
 800032a:	461a      	mov	r2, r3
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <main+0x20>)
 800032e:	701a      	strb	r2, [r3, #0]
		led_toggle(data);
 8000330:	4b02      	ldr	r3, [pc, #8]	; (800033c <main+0x20>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffbb 	bl	80002b0 <led_toggle>
		data=uart_read();
 800033a:	e7f3      	b.n	8000324 <main+0x8>
 800033c:	2000001c 	.word	0x2000001c

08000340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800039c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0b      	ldr	r2, [pc, #44]	; (80003ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000380:	4c0b      	ldr	r4, [pc, #44]	; (80003b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800038e:	f7ff ffd7 	bl	8000340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000396:	f7ff ffc1 	bl	800031c <main>
  bx  lr    
 800039a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	20000020 	.word	0x20000020

080003b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	; (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	; (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	; (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
